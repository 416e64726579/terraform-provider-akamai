unchanged:
--- a/pkg/akamai/errors.go
+++ b/pkg/akamai/errors.go
@@ -18,6 +18,9 @@ var (
 	// ErrDuplicateSchemaKey is returned when a duplicate schema key is detected during merge
 	ErrDuplicateSchemaKey = &Error{"duplicate schema key", false}
 
+	// ErrNoConfiguredProviders is returned when no providers are configured
+	ErrNoConfiguredProviders = &Error{"One or more Akamai Edgegrid provider configurations must be defined", false}
+
 	// ErrCacheEntryNotFound returns a cache entry error
 	ErrCacheEntryNotFound = func(key string) error { return &Error{fmt.Sprintf("cache entry %q not found", key), true} }
 )
diff -u b/pkg/akamai/provider.go b/pkg/akamai/provider.go
--- b/pkg/akamai/provider.go
+++ b/pkg/akamai/provider.go
@@ -130,9 +130,8 @@
 		}
 
 		instance.ConfigureContextFunc = func(ctx context.Context, d *schema.ResourceData) (interface{}, diag.Diagnostics) {
-			log.Debug("START providerConfigure  %s", instance.TerraformVersion)
+			var stateSet bool
 
-			stateSet := false
 			for _, p := range instance.subs {
 				state, err := p.Configure(ctx, log, d)
 				if err != nil {
@@ -141,6 +140,18 @@
 				instance.states[p.Name()] = state
 			}
 
+			stateSet := false
+			for _, s := range instance.states {
+				if s != nil {
+					stateSet = true
+					break
+				}
+			}
+
+			if !stateSet {
+				return nil, ErrNoConfiguredProviders.Diagnostics()
+			}
+
 			// TODO: once the client is update this will be done elsewhere
 			client.UserAgent = instance.UserAgent("terraform-provider-akamai", instance.TerraformVersion)
 
